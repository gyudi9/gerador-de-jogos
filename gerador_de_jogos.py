# -*- coding: utf-8 -*-
"""gerador-de-jogos

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EXSC_BY3zIE2yVlNi2K2vBQafftyLJe7
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Instalar Framework ADK de agentes do Google ################################################
!pip -q install google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a sa√≠da de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisi√ß√µes HTTP
import warnings

warnings.filterwarnings("ignore")

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##########################################
# --- Agente 1: Redator de hist√≥rias --- #
##########################################

def agente_redator(topico, nome_personagem_principal):
  redator = Agent(
      name = "agente_redator",
      model = "gemini-2.0-flash",
      description = "Agente que escreve hist√≥rias",
      tools = [google_search],
      instruction = """
      Voc√™ √© um criador de hist√≥rias especializado em construir narrativas originais e envolventes.
      Receber√° um tema e o nome do personagem principal.
      Sua tarefa √© criar uma hist√≥ria completa, com in√≠cio, desenvolvimento e fim, que possa futuramente ser convertida em um jogo no estilo ‚ÄúEscolha sua Aventura‚Äù.
      A hist√≥ria deve conter:
      Um protagonista bem definido (nome j√° fornecido)
      Uma ambienta√ß√£o clara e criativa
      Elementos de tens√£o, conflito e progress√£o narrativa
      Dilemas morais ou desafios com m√∫ltiplas possibilidades de desfecho
      Um enredo com acontecimentos significativos que permitam uma posterior ramifica√ß√£o em decis√µes
      3 poss√≠veis finais diferentes (ex: um bom, um ruim, um neutro), com caminhos l√≥gicos que conduzem a cada um deles
      Escreva como se fosse um conto, com narrativa linear
      Pesquise no Google (google_search) hist√≥rias com esse tema para ajudar a servir de base.
      """
  )
  entrada_do_agente_redator = f"Tema: {tema}\nNome do personagem principal: {nome_personagem_principal}"
  roteiro = call_agent(redator, entrada_do_agente_redator)
  return roteiro

################################################
# --- Agente 2: Conversor  --- #
################################################
def agente_conversor(tema, roteiro_inicial):
    conversor = Agent(
        name="agente_conversor",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um designer de narrativas interativas e especialista em transformar hist√≥rias tradicionais em jogos do tipo "Escolha sua Aventura".
        Receber√° como entrada uma hist√≥ria linear completa, com in√≠cio, meio e fim, incluindo m√∫ltiplos finais poss√≠veis.
        Sua tarefa √© converter essa hist√≥ria em um roteiro estruturado de jogo interativo, onde o jogador poder√° tomar decis√µes que afetam o rumo da narrativa.
        Para isso, siga estas instru√ß√µes:
        1. Divida a hist√≥ria em cenas interativas numeradas (por exemplo: Cena 1, Cena 2...)
        Cada cena deve ter:
        Uma descri√ß√£o imersiva do momento atual
        De 2 a 4 op√ß√µes de escolha para o jogador
        Para cada escolha, defina:
        Um texto da escolha (o que o jogador est√° fazendo)
        A consequ√™ncia imediata (em uma linha)
        Para onde essa escolha leva (ex: Cena 2A, Cena 3B etc.)
        2. Crie caminhos ramificados:
        Permita que algumas escolhas levem a caminhos alternativos com eventos exclusivos.
        Inclua oportunidades de ganhar itens, aliados ou informa√ß√µes.
        Algumas escolhas podem encerrar o jogo (finais bons, ruins ou neutros).
        """,
        description="Agente que converte hist√≥rias no estilo Escolha sua Aventura",
        tools=[google_search]
    )

    entrada_do_agente_conversor = f"Tema:{tema}\nRoteiro inicial: {roteiro_inicial}"
    # Executa o agente
    roteiro_adaptado = call_agent(conversor, entrada_do_agente_conversor)
    return roteiro_adaptado

######################################
# --- Agente 3: Revisor --- #
######################################
def agente_revisor(tema, roteiro_adaptado):
    revisor = Agent(
        name="agente_redator",
        model="gemini-2.0-flash",
        instruction="""
            Voc√™ √© um revisor de narrativa interativa com foco em tom, emo√ß√£o e coer√™ncia l√≥gica.
            Receber√° um roteiro com cenas e decis√µes ramificadas para um jogo estilo "Escolha sua Aventura".
            Sua tarefa √© revisar o conte√∫do de forma completa:
            Verifique se cada decis√£o leva a uma consequ√™ncia coerente e l√≥gica.
            Enrique√ßa a narrativa com tom emocional adequado: suspense, humor, tens√£o, drama ou al√≠vio.
            Torne as cenas mais imersivas com descri√ß√µes v√≠vidas, di√°logos ou met√°foras (sem exagero).
            Inclua elementos adicionais se fizerem sentido (ex: pistas ocultas, intera√ß√µes inesperadas, novos itens).
            """,
        description="Agente revisor"
    )
    entrada_do_agente_revisor = f"Tema: {tema}\nRoteiro Adaptado: {roteiro_adaptado}"
    # Executa o agente
    roteiro_revisado = call_agent(revisor, entrada_do_agente_revisor)
    return roteiro_revisado

##########################################
# --- Agente 4: Gerador de c√≥digo --- #
##########################################
def agente_gerador(tema, roteiro_revisado):
    gerador = Agent(
        name="agente_gerador",
        model="gemini-2.0-flash",
        instruction="""
            Voc√™ √© um gerador de c√≥digo Python que transforma hist√≥rias interativas revisadas em jogos completos de "Escolha sua Aventura", jog√°veis via terminal.

            Voc√™ ir√° receber um roteiro revisado com m√∫ltiplos caminhos e transformar em um jogo funcional, imersivo e bem estruturado em Python.

            O jogo deve:
            Utilizar print(), input() e uma fun√ß√£o slow_print() (com time.sleep) para imprimir o texto com clima narrativo.
            Ter m√∫ltiplas cenas com diversas escolhas por n√≥ (2 a 4 op√ß√µes).
            Utilizar uma estrutura l√≥gica clara e modular, com vari√°veis como n√≥s ou cenas, cada uma com:
            Texto da cena
            Lista de escolhas
            Transi√ß√µes (n√≥ destino)
            Permitir a exist√™ncia de:
            Itens adquir√≠veis (ex: invent√°rio com amuletos, armas, chaves, etc.)
            Condicionais baseadas em itens (ex: "se tiver chave, abrir porta secreta")
            Finaliza√ß√µes diversas (bons, ruins, neutros)
            Condi√ß√µes l√≥gicas simples ou m√∫ltiplas para decis√µes
            Permitir que o jogador jogue novamente ao final.
            N√£o precisa seguir exatamente uma estrutura fixa, mas o jogo deve estar completo e funcional em um √∫nico arquivo .py, leg√≠vel, com boa divis√£o de blocos de c√≥digo.

            Evite usar bibliotecas externas al√©m de time e sys.
            """,
        description="Agente gerador de c√≥digo Python"
    )
    entrada_do_agente_gerador = f"Tema: {tema}\nRoteiro Revisado: {roteiro_revisado}"
    # Executa o agente
    codigo_final = call_agent(gerador, entrada_do_agente_gerador)
    return codigo_final

print("üöÄ Iniciando o Sistema de Cria√ß√£o de Jogos com 4 Agentes üöÄ")

# --- Obter o Tema do Usu√°rio ---
tema = input("‚ùì Por favor, digite o TEMA sobre o jogo em que voc√™ deseja criar: ")
nome_personagem_principal = input("‚ùì Por favor, digite o NOME do PERSONAGEM PRINCIPAL do seu jogo: ")

if not tema:
  print("Voc√™ esqueceu de digitar o t√≥pico!")

if not nome_personagem_principal:
  print("Voc√™ esqueceu de digitar o nome do personagem principal!")
else:
  print(f"Maravilha! Vamos ent√£o criar o jogo do {nome_personagem_principal} sobre o {tema}!!")

  roteiro_inicial = agente_redator(tema, nome_personagem_principal)
  print("\n--- Resultado do Agente 1 ---\n")
  display(to_markdown(roteiro_inicial))
  print("--------------------------------------------------------------")

  roteiro_adaptado = agente_conversor(tema, roteiro_inicial)
  print("\n--- Resultado do Agente 2 ---\n")
  display(to_markdown(roteiro_adaptado))
  print("--------------------------------------------------------------")

  roteiro_revisado = agente_revisor(tema, roteiro_adaptado)
  print("\n--- Resultado do Agente 3 ---\n")
  display(to_markdown(roteiro_revisado))
  print("--------------------------------------------------------------")

  c√≥digo_final = agente_gerador(tema, roteiro_revisado)
  print("\n--- Resultado do Agente 4 ---\n")
  display(to_markdown(c√≥digo_final))